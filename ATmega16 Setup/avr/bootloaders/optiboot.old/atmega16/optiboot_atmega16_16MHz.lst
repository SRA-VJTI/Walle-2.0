
optiboot_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00003ffe  00003ffe  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00003fc6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000416  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ff  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015c  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000365  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
    3e00:	0f 92       	push	r0
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3e06:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
    3e08:	8f e5       	ldi	r24, 0x5F	; 95
    3e0a:	94 e0       	ldi	r25, 0x04	; 4
    3e0c:	9e bf       	out	0x3e, r25	; 62
    3e0e:	8d bf       	out	0x3d, r24	; 61
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    3e10:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e12:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    3e14:	98 2f       	mov	r25, r24
    3e16:	9d 70       	andi	r25, 0x0D	; 13
    3e18:	09 f0       	breq	.+2      	; 0x3e1c <main+0x1c>
      appStart(ch);
    3e1a:	cf d0       	rcall	.+414    	; 0x3fba <appStart>
    3e1c:	85 e0       	ldi	r24, 0x05	; 5

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e1e:	8e bd       	out	0x2e, r24	; 46
    3e20:	82 e0       	ldi	r24, 0x02	; 2
#endif

#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  UCSRA = _BV(U2X); //Double speed mode USART
    3e22:	8b b9       	out	0x0b, r24	; 11
    3e24:	88 e1       	ldi	r24, 0x18	; 24
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    3e26:	8a b9       	out	0x0a, r24	; 10
    3e28:	86 e8       	ldi	r24, 0x86	; 134
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    3e2a:	80 bd       	out	0x20, r24	; 32
    3e2c:	80 e1       	ldi	r24, 0x10	; 16
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e2e:	89 b9       	out	0x09, r24	; 9
    3e30:	8e e0       	ldi	r24, 0x0E	; 14
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    3e32:	af d0       	rcall	.+350    	; 0x3f92 <watchdogConfig>
    3e34:	b8 9a       	sbi	0x17, 0	; 23
    3e36:	24 e0       	ldi	r18, 0x04	; 4

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3e38:	80 e3       	ldi	r24, 0x30	; 48
    3e3a:	9c ef       	ldi	r25, 0xFC	; 252
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e3c:	54 e0       	ldi	r21, 0x04	; 4
    3e3e:	41 e0       	ldi	r20, 0x01	; 1
    TIFR1 = _BV(TOV1);
    3e40:	9d bd       	out	0x2d, r25	; 45
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    3e42:	8c bd       	out	0x2c, r24	; 44
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e44:	58 bf       	out	0x38, r21	; 56
    3e46:	08 b6       	in	r0, 0x38	; 56
    TIFR1 = _BV(TOV1);
    3e48:	02 fe       	sbrs	r0, 2
    while(!(TIFR1 & _BV(TOV1)));
    3e4a:	fd cf       	rjmp	.-6      	; 0x3e46 <main+0x46>
    3e4c:	38 b3       	in	r19, 0x18	; 24
    3e4e:	34 27       	eor	r19, r20
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    3e50:	38 bb       	out	0x18, r19	; 24
    3e52:	a8 95       	wdr
    3e54:	21 50       	subi	r18, 0x01	; 1
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e56:	a1 f7       	brne	.-24     	; 0x3e40 <main+0x40>
    3e58:	00 e0       	ldi	r16, 0x00	; 0
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    3e5a:	10 e0       	ldi	r17, 0x00	; 0
    3e5c:	ee 24       	eor	r14, r14
    3e5e:	e3 94       	inc	r14
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e60:	e5 e0       	ldi	r30, 0x05	; 5
    3e62:	de 2e       	mov	r13, r30
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    3e64:	f1 e1       	ldi	r31, 0x11	; 17
    3e66:	cf 2e       	mov	r12, r31
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    3e68:	8d d0       	rcall	.+282    	; 0x3f84 <getch>
    3e6a:	81 34       	cpi	r24, 0x41	; 65
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e6c:	79 f4       	brne	.+30     	; 0x3e8c <main+0x8c>
    3e6e:	8a d0       	rcall	.+276    	; 0x3f84 <getch>

    if(ch == STK_GET_PARAMETER) {
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	93 d0       	rcall	.+294    	; 0x3f9a <verifySpace>
      unsigned char which = getch();
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	82 38       	cpi	r24, 0x82	; 130
      verifySpace();
    3e78:	11 f4       	brne	.+4      	; 0x3e7e <main+0x7e>
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	05 c0       	rjmp	.+10     	; 0x3e88 <main+0x88>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    3e7e:	81 38       	cpi	r24, 0x81	; 129
    3e80:	11 f4       	brne	.+4      	; 0x3e86 <main+0x86>
    3e82:	86 e0       	ldi	r24, 0x06	; 6
	  putch(optiboot_version & 0xFF);
    3e84:	01 c0       	rjmp	.+2      	; 0x3e88 <main+0x88>
    3e86:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == 0x81) {
    3e88:	79 d0       	rcall	.+242    	; 0x3f7c <putch>
    3e8a:	75 c0       	rjmp	.+234    	; 0x3f76 <main+0x176>
	  putch(optiboot_version >> 8);
    3e8c:	82 34       	cpi	r24, 0x42	; 66
    3e8e:	11 f4       	brne	.+4      	; 0x3e94 <main+0x94>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    3e90:	84 e1       	ldi	r24, 0x14	; 20
    3e92:	03 c0       	rjmp	.+6      	; 0x3e9a <main+0x9a>
    3e94:	85 34       	cpi	r24, 0x45	; 69
    3e96:	19 f4       	brne	.+6      	; 0x3e9e <main+0x9e>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    3e98:	85 e0       	ldi	r24, 0x05	; 5
    3e9a:	87 d0       	rcall	.+270    	; 0x3faa <getNch>
      // SET DEVICE is ignored
      getNch(20);
    3e9c:	6c c0       	rjmp	.+216    	; 0x3f76 <main+0x176>
    3e9e:	85 35       	cpi	r24, 0x55	; 85
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3ea0:	69 f4       	brne	.+26     	; 0x3ebc <main+0xbc>
    3ea2:	70 d0       	rcall	.+224    	; 0x3f84 <getch>
      // SET DEVICE EXT is ignored
      getNch(5);
    3ea4:	88 2e       	mov	r8, r24
    3ea6:	99 24       	eor	r9, r9
    3ea8:	6d d0       	rcall	.+218    	; 0x3f84 <getch>
    3eaa:	08 2f       	mov	r16, r24
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3eac:	10 e0       	ldi	r17, 0x00	; 0
    3eae:	10 2f       	mov	r17, r16
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3eb0:	00 27       	eor	r16, r16
    3eb2:	08 29       	or	r16, r8
    3eb4:	19 29       	or	r17, r9
    3eb6:	00 0f       	add	r16, r16
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3eb8:	11 1f       	adc	r17, r17
    3eba:	5c c0       	rjmp	.+184    	; 0x3f74 <main+0x174>
    3ebc:	86 35       	cpi	r24, 0x56	; 86
    3ebe:	21 f4       	brne	.+8      	; 0x3ec8 <main+0xc8>
    3ec0:	84 e0       	ldi	r24, 0x04	; 4
    3ec2:	73 d0       	rcall	.+230    	; 0x3faa <getNch>
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	e0 cf       	rjmp	.-64     	; 0x3e88 <main+0x88>
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3ec8:	84 36       	cpi	r24, 0x64	; 100
    3eca:	09 f0       	breq	.+2      	; 0x3ece <main+0xce>
    3ecc:	38 c0       	rjmp	.+112    	; 0x3f3e <main+0x13e>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3ece:	5a d0       	rcall	.+180    	; 0x3f84 <getch>
    3ed0:	59 d0       	rcall	.+178    	; 0x3f84 <getch>
      // UNIVERSAL command is ignored
      getNch(4);
    3ed2:	f8 2e       	mov	r15, r24
    3ed4:	57 d0       	rcall	.+174    	; 0x3f84 <getch>
    3ed6:	b8 2e       	mov	r11, r24
      putch(0x00);
    3ed8:	81 2c       	mov	r8, r1
    3eda:	51 e0       	ldi	r21, 0x01	; 1
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3edc:	95 2e       	mov	r9, r21
    3ede:	52 d0       	rcall	.+164    	; 0x3f84 <getch>
    3ee0:	f4 01       	movw	r30, r8
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    3ee2:	81 93       	st	Z+, r24
    3ee4:	4f 01       	movw	r8, r30
    3ee6:	fe 16       	cp	r15, r30
    3ee8:	d1 f7       	brne	.-12     	; 0x3ede <main+0xde>
    3eea:	57 d0       	rcall	.+174    	; 0x3f9a <verifySpace>
      savelength = length;
      desttype = getch();
    3eec:	f5 e4       	ldi	r31, 0x45	; 69
    3eee:	bf 16       	cp	r11, r31
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <main+0xf4>

      // read a page worth of contents
      bufPtr = buff;
    3ef2:	ff cf       	rjmp	.-2      	; 0x3ef2 <main+0xf2>
    3ef4:	83 e0       	ldi	r24, 0x03	; 3
    3ef6:	f8 01       	movw	r30, r16
      do *bufPtr++ = getch();
    3ef8:	87 bf       	out	0x37, r24	; 55
    3efa:	e8 95       	spm
    3efc:	07 b6       	in	r0, 0x37	; 55
    3efe:	00 fc       	sbrc	r0, 0
    3f00:	fd cf       	rjmp	.-6      	; 0x3efc <main+0xfc>
      while (--length);
    3f02:	f8 01       	movw	r30, r16
    3f04:	a0 e0       	ldi	r26, 0x00	; 0

      // Read command terminator, start reply
      verifySpace();
    3f06:	b1 e0       	ldi	r27, 0x01	; 1
    3f08:	2c 91       	ld	r18, X
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	11 96       	adiw	r26, 0x01	; 1
    3f0e:	8c 91       	ld	r24, X
    3f10:	11 97       	sbiw	r26, 0x01	; 1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	98 2f       	mov	r25, r24
    3f16:	88 27       	eor	r24, r24
    3f18:	82 2b       	or	r24, r18
	    boot_spm_busy_wait();
    3f1a:	93 2b       	or	r25, r19
    3f1c:	12 96       	adiw	r26, 0x02	; 2
    3f1e:	0c 01       	movw	r0, r24
    3f20:	e7 be       	out	0x37, r14	; 55
    3f22:	e8 95       	spm
    3f24:	11 24       	eor	r1, r1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    3f26:	32 96       	adiw	r30, 0x02	; 2
    3f28:	fa 16       	cp	r15, r26
		a |= (*bufPtr++) << 8;
    3f2a:	71 f7       	brne	.-36     	; 0x3f08 <main+0x108>
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	d7 be       	out	0x37, r13	; 55
    3f30:	e8 95       	spm
    3f32:	07 b6       	in	r0, 0x37	; 55
    3f34:	00 fc       	sbrc	r0, 0
    3f36:	fd cf       	rjmp	.-6      	; 0x3f32 <main+0x132>
    3f38:	c7 be       	out	0x37, r12	; 55
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
    3f3a:	e8 95       	spm
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f3c:	1c c0       	rjmp	.+56     	; 0x3f76 <main+0x176>
    3f3e:	84 37       	cpi	r24, 0x74	; 116
    3f40:	69 f4       	brne	.+26     	; 0x3f5c <main+0x15c>
    3f42:	20 d0       	rcall	.+64     	; 0x3f84 <getch>
		addrPtr += 2;
    3f44:	1f d0       	rcall	.+62     	; 0x3f84 <getch>
	    } while (len -= 2);
    3f46:	f8 2e       	mov	r15, r24
    3f48:	1d d0       	rcall	.+58     	; 0x3f84 <getch>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    3f4a:	27 d0       	rcall	.+78     	; 0x3f9a <verifySpace>
    3f4c:	48 01       	movw	r8, r16
    3f4e:	f4 01       	movw	r30, r8
	    boot_spm_busy_wait();
    3f50:	85 91       	lpm	r24, Z+
    3f52:	4f 01       	movw	r8, r30
    3f54:	13 d0       	rcall	.+38     	; 0x3f7c <putch>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    3f56:	fa 94       	dec	r15
    3f58:	d1 f7       	brne	.-12     	; 0x3f4e <main+0x14e>
    3f5a:	0d c0       	rjmp	.+26     	; 0x3f76 <main+0x176>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f5c:	85 37       	cpi	r24, 0x75	; 117
    3f5e:	31 f4       	brne	.+12     	; 0x3f6c <main+0x16c>
      uint8_t desttype;
      GETLENGTH(length);
    3f60:	1c d0       	rcall	.+56     	; 0x3f9a <verifySpace>
    3f62:	8e e1       	ldi	r24, 0x1E	; 30
    3f64:	0b d0       	rcall	.+22     	; 0x3f7c <putch>
    3f66:	84 e9       	ldi	r24, 0x94	; 148
    3f68:	09 d0       	rcall	.+18     	; 0x3f7c <putch>

      desttype = getch();
    3f6a:	8d cf       	rjmp	.-230    	; 0x3e86 <main+0x86>
    3f6c:	81 35       	cpi	r24, 0x51	; 81

      verifySpace();
    3f6e:	11 f4       	brne	.+4      	; 0x3f74 <main+0x174>
    3f70:	88 e0       	ldi	r24, 0x08	; 8
    3f72:	0f d0       	rcall	.+30     	; 0x3f92 <watchdogConfig>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    3f74:	12 d0       	rcall	.+36     	; 0x3f9a <verifySpace>
    3f76:	80 e1       	ldi	r24, 0x10	; 16
    3f78:	01 d0       	rcall	.+2      	; 0x3f7c <putch>
    3f7a:	76 cf       	rjmp	.-276    	; 0x3e68 <main+0x68>

00003f7c <putch>:
    3f7c:	5d 9b       	sbis	0x0b, 5	; 11
	} while (--length);
    3f7e:	fe cf       	rjmp	.-4      	; 0x3f7c <putch>
    3f80:	8c b9       	out	0x0c, r24	; 12
    3f82:	08 95       	ret

00003f84 <getch>:

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f84:	5f 9b       	sbis	0x0b, 7	; 11
    3f86:	fe cf       	rjmp	.-4      	; 0x3f84 <getch>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f88:	5c 99       	sbic	0x0b, 4	; 11
    3f8a:	01 c0       	rjmp	.+2      	; 0x3f8e <getch+0xa>
      putch(SIGNATURE_0);
    3f8c:	a8 95       	wdr
    3f8e:	8c b1       	in	r24, 0x0c	; 12
    3f90:	08 95       	ret

00003f92 <watchdogConfig>:
      putch(SIGNATURE_1);
    3f92:	98 e1       	ldi	r25, 0x18	; 24
    3f94:	91 bd       	out	0x21, r25	; 33
    3f96:	81 bd       	out	0x21, r24	; 33
    3f98:	08 95       	ret

00003f9a <verifySpace>:
      putch(SIGNATURE_2);
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f9a:	f4 df       	rcall	.-24     	; 0x3f84 <getch>
    3f9c:	80 32       	cpi	r24, 0x20	; 32
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f9e:	19 f0       	breq	.+6      	; 0x3fa6 <verifySpace+0xc>
    3fa0:	88 e0       	ldi	r24, 0x08	; 8
    3fa2:	f7 df       	rcall	.-18     	; 0x3f92 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3fa4:	ff cf       	rjmp	.-2      	; 0x3fa4 <verifySpace+0xa>
    3fa6:	84 e1       	ldi	r24, 0x14	; 20
    }
    putch(STK_OK);
    3fa8:	e9 cf       	rjmp	.-46     	; 0x3f7c <putch>

00003faa <getNch>:
    3faa:	cf 93       	push	r28
    3fac:	c8 2f       	mov	r28, r24
  }
    3fae:	ea df       	rcall	.-44     	; 0x3f84 <getch>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
}
    3fb0:	c1 50       	subi	r28, 0x01	; 1
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fb2:	e9 f7       	brne	.-6      	; 0x3fae <getNch+0x4>
    3fb4:	f2 df       	rcall	.-28     	; 0x3f9a <verifySpace>
  do getch(); while (--count);
    3fb6:	cf 91       	pop	r28
    3fb8:	08 95       	ret

00003fba <appStart>:
    3fba:	28 2e       	mov	r2, r24
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
  verifySpace();
    3fbe:	e9 df       	rcall	.-46     	; 0x3f92 <watchdogConfig>
    3fc0:	e0 e0       	ldi	r30, 0x00	; 0
}
    3fc2:	ff 27       	eor	r31, r31
    3fc4:	09 94       	ijmp
