
optiboot_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00007fcc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000028  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000416  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ff  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000160  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000181  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000378  00000000  00000000  00000c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
    7e00:	0f 92       	push	r0
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e06:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
    7e08:	8f e5       	ldi	r24, 0x5F	; 95
    7e0a:	98 e0       	ldi	r25, 0x08	; 8
    7e0c:	9e bf       	out	0x3e, r25	; 62
    7e0e:	8d bf       	out	0x3d, r24	; 61
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    7e10:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e12:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    7e14:	98 2f       	mov	r25, r24
    7e16:	9d 70       	andi	r25, 0x0D	; 13
    7e18:	09 f0       	breq	.+2      	; 0x7e1c <main+0x1c>
      appStart(ch);
    7e1a:	d2 d0       	rcall	.+420    	; 0x7fc0 <appStart>
    7e1c:	85 e0       	ldi	r24, 0x05	; 5

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e1e:	8e bd       	out	0x2e, r24	; 46
    7e20:	82 e0       	ldi	r24, 0x02	; 2
#endif

#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  UCSRA = _BV(U2X); //Double speed mode USART
    7e22:	8b b9       	out	0x0b, r24	; 11
    7e24:	88 e1       	ldi	r24, 0x18	; 24
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    7e26:	8a b9       	out	0x0a, r24	; 10
    7e28:	86 e8       	ldi	r24, 0x86	; 134
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    7e2a:	80 bd       	out	0x20, r24	; 32
    7e2c:	85 e1       	ldi	r24, 0x15	; 21
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e2e:	89 b9       	out	0x09, r24	; 9
    7e30:	8e e0       	ldi	r24, 0x0E	; 14
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    7e32:	b2 d0       	rcall	.+356    	; 0x7f98 <watchdogConfig>
    7e34:	b8 9a       	sbi	0x17, 0	; 23
    7e36:	24 e0       	ldi	r18, 0x04	; 4

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e38:	8c e3       	ldi	r24, 0x3C	; 60
    7e3a:	9b ef       	ldi	r25, 0xFB	; 251
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e3c:	54 e0       	ldi	r21, 0x04	; 4
    7e3e:	41 e0       	ldi	r20, 0x01	; 1
    TIFR1 = _BV(TOV1);
    7e40:	9d bd       	out	0x2d, r25	; 45
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    7e42:	8c bd       	out	0x2c, r24	; 44
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e44:	58 bf       	out	0x38, r21	; 56
    7e46:	08 b6       	in	r0, 0x38	; 56
    TIFR1 = _BV(TOV1);
    7e48:	02 fe       	sbrs	r0, 2
    while(!(TIFR1 & _BV(TOV1)));
    7e4a:	fd cf       	rjmp	.-6      	; 0x7e46 <main+0x46>
    7e4c:	38 b3       	in	r19, 0x18	; 24
    7e4e:	34 27       	eor	r19, r20
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    7e50:	38 bb       	out	0x18, r19	; 24
    7e52:	a8 95       	wdr
    7e54:	21 50       	subi	r18, 0x01	; 1
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e56:	a1 f7       	brne	.-24     	; 0x7e40 <main+0x40>
    7e58:	00 e0       	ldi	r16, 0x00	; 0
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e5a:	10 e0       	ldi	r17, 0x00	; 0
    7e5c:	53 e0       	ldi	r21, 0x03	; 3
    7e5e:	f5 2e       	mov	r15, r21
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7e60:	ee 24       	eor	r14, r14
    7e62:	e3 94       	inc	r14
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e64:	65 e0       	ldi	r22, 0x05	; 5
    7e66:	d6 2e       	mov	r13, r22
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7e68:	71 e1       	ldi	r23, 0x11	; 17
    7e6a:	c7 2e       	mov	r12, r23
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7e6c:	8e d0       	rcall	.+284    	; 0x7f8a <getch>
    7e6e:	81 34       	cpi	r24, 0x41	; 65
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e70:	71 f4       	brne	.+28     	; 0x7e8e <main+0x8e>
    7e72:	8b d0       	rcall	.+278    	; 0x7f8a <getch>

    if(ch == STK_GET_PARAMETER) {
    7e74:	89 83       	std	Y+1, r24	; 0x01
    7e76:	94 d0       	rcall	.+296    	; 0x7fa0 <verifySpace>
      unsigned char which = getch();
    7e78:	89 81       	ldd	r24, Y+1	; 0x01
    7e7a:	82 38       	cpi	r24, 0x82	; 130
      verifySpace();
    7e7c:	09 f4       	brne	.+2      	; 0x7e80 <main+0x80>
    7e7e:	77 c0       	rjmp	.+238    	; 0x7f6e <main+0x16e>
    7e80:	81 38       	cpi	r24, 0x81	; 129
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    7e82:	11 f4       	brne	.+4      	; 0x7e88 <main+0x88>
    7e84:	86 e0       	ldi	r24, 0x06	; 6
    7e86:	01 c0       	rjmp	.+2      	; 0x7e8a <main+0x8a>
    7e88:	83 e0       	ldi	r24, 0x03	; 3
	  putch(optiboot_version & 0xFF);
      } else if (which == 0x81) {
    7e8a:	7b d0       	rcall	.+246    	; 0x7f82 <putch>
    7e8c:	77 c0       	rjmp	.+238    	; 0x7f7c <main+0x17c>
	  putch(optiboot_version >> 8);
    7e8e:	82 34       	cpi	r24, 0x42	; 66
    7e90:	11 f4       	brne	.+4      	; 0x7e96 <main+0x96>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e92:	84 e1       	ldi	r24, 0x14	; 20
    7e94:	03 c0       	rjmp	.+6      	; 0x7e9c <main+0x9c>
    7e96:	85 34       	cpi	r24, 0x45	; 69
    7e98:	19 f4       	brne	.+6      	; 0x7ea0 <main+0xa0>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e9a:	85 e0       	ldi	r24, 0x05	; 5
    7e9c:	89 d0       	rcall	.+274    	; 0x7fb0 <getNch>
      // SET DEVICE is ignored
      getNch(20);
    7e9e:	6e c0       	rjmp	.+220    	; 0x7f7c <main+0x17c>
    7ea0:	85 35       	cpi	r24, 0x55	; 85
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7ea2:	69 f4       	brne	.+26     	; 0x7ebe <main+0xbe>
    7ea4:	72 d0       	rcall	.+228    	; 0x7f8a <getch>
      // SET DEVICE EXT is ignored
      getNch(5);
    7ea6:	a8 2e       	mov	r10, r24
    7ea8:	bb 24       	eor	r11, r11
    7eaa:	6f d0       	rcall	.+222    	; 0x7f8a <getch>
    7eac:	08 2f       	mov	r16, r24
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7eae:	10 e0       	ldi	r17, 0x00	; 0
    7eb0:	10 2f       	mov	r17, r16
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7eb2:	00 27       	eor	r16, r16
    7eb4:	0a 29       	or	r16, r10
    7eb6:	1b 29       	or	r17, r11
    7eb8:	00 0f       	add	r16, r16
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7eba:	11 1f       	adc	r17, r17
    7ebc:	5e c0       	rjmp	.+188    	; 0x7f7a <main+0x17a>
    7ebe:	86 35       	cpi	r24, 0x56	; 86
    7ec0:	21 f4       	brne	.+8      	; 0x7eca <main+0xca>
    7ec2:	84 e0       	ldi	r24, 0x04	; 4
    7ec4:	75 d0       	rcall	.+234    	; 0x7fb0 <getNch>
    7ec6:	80 e0       	ldi	r24, 0x00	; 0
    7ec8:	e0 cf       	rjmp	.-64     	; 0x7e8a <main+0x8a>
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eca:	84 36       	cpi	r24, 0x64	; 100
    7ecc:	09 f0       	breq	.+2      	; 0x7ed0 <main+0xd0>
    7ece:	39 c0       	rjmp	.+114    	; 0x7f42 <main+0x142>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7ed0:	5c d0       	rcall	.+184    	; 0x7f8a <getch>
    7ed2:	5b d0       	rcall	.+182    	; 0x7f8a <getch>
      // UNIVERSAL command is ignored
      getNch(4);
    7ed4:	a8 2e       	mov	r10, r24
    7ed6:	59 d0       	rcall	.+178    	; 0x7f8a <getch>
    7ed8:	98 2e       	mov	r9, r24
      putch(0x00);
    7eda:	ba 2c       	mov	r11, r10
    7edc:	20 e6       	ldi	r18, 0x60	; 96
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ede:	62 2e       	mov	r6, r18
    7ee0:	71 2c       	mov	r7, r1
    7ee2:	53 d0       	rcall	.+166    	; 0x7f8a <getch>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ee4:	f3 01       	movw	r30, r6
    7ee6:	81 93       	st	Z+, r24
    7ee8:	3f 01       	movw	r6, r30
    7eea:	ba 94       	dec	r11
    7eec:	d1 f7       	brne	.-12     	; 0x7ee2 <main+0xe2>
      savelength = length;
      desttype = getch();
    7eee:	58 d0       	rcall	.+176    	; 0x7fa0 <verifySpace>
    7ef0:	f5 e4       	ldi	r31, 0x45	; 69
    7ef2:	9f 16       	cp	r9, r31
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ef4:	09 f4       	brne	.+2      	; 0x7ef8 <main+0xf8>
      savelength = length;
      desttype = getch();

      // read a page worth of contents
      bufPtr = buff;
    7ef6:	ff cf       	rjmp	.-2      	; 0x7ef6 <main+0xf6>
    7ef8:	f8 01       	movw	r30, r16
    7efa:	f7 be       	out	0x37, r15	; 55
      do *bufPtr++ = getch();
    7efc:	e8 95       	spm
    7efe:	07 b6       	in	r0, 0x37	; 55
    7f00:	00 fc       	sbrc	r0, 0
    7f02:	fd cf       	rjmp	.-6      	; 0x7efe <main+0xfe>
    7f04:	f8 01       	movw	r30, r16
      while (--length);
    7f06:	8a 2d       	mov	r24, r10
    7f08:	a0 e6       	ldi	r26, 0x60	; 96

      // Read command terminator, start reply
      verifySpace();
    7f0a:	b0 e0       	ldi	r27, 0x00	; 0
    7f0c:	4c 91       	ld	r20, X
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    7f0e:	50 e0       	ldi	r21, 0x00	; 0
    7f10:	11 96       	adiw	r26, 0x01	; 1
    7f12:	2c 91       	ld	r18, X
    7f14:	11 97       	sbiw	r26, 0x01	; 1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7f16:	30 e0       	ldi	r19, 0x00	; 0
    7f18:	32 2f       	mov	r19, r18
    7f1a:	22 27       	eor	r18, r18
	    boot_spm_busy_wait();
    7f1c:	24 2b       	or	r18, r20
    7f1e:	35 2b       	or	r19, r21
    7f20:	12 96       	adiw	r26, 0x02	; 2
    7f22:	09 01       	movw	r0, r18
    7f24:	e7 be       	out	0x37, r14	; 55
    7f26:	e8 95       	spm
    7f28:	11 24       	eor	r1, r1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7f2a:	32 96       	adiw	r30, 0x02	; 2
    7f2c:	82 50       	subi	r24, 0x02	; 2
		a |= (*bufPtr++) << 8;
    7f2e:	71 f7       	brne	.-36     	; 0x7f0c <main+0x10c>
    7f30:	f8 01       	movw	r30, r16
    7f32:	d7 be       	out	0x37, r13	; 55
    7f34:	e8 95       	spm
    7f36:	07 b6       	in	r0, 0x37	; 55
    7f38:	00 fc       	sbrc	r0, 0
    7f3a:	fd cf       	rjmp	.-6      	; 0x7f36 <main+0x136>
    7f3c:	c7 be       	out	0x37, r12	; 55
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
    7f3e:	e8 95       	spm
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f40:	1d c0       	rjmp	.+58     	; 0x7f7c <main+0x17c>
    7f42:	84 37       	cpi	r24, 0x74	; 116
    7f44:	69 f4       	brne	.+26     	; 0x7f60 <main+0x160>
    7f46:	21 d0       	rcall	.+66     	; 0x7f8a <getch>
		addrPtr += 2;
    7f48:	20 d0       	rcall	.+64     	; 0x7f8a <getch>
	    } while (len -= 2);
    7f4a:	b8 2e       	mov	r11, r24
    7f4c:	1e d0       	rcall	.+60     	; 0x7f8a <getch>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7f4e:	28 d0       	rcall	.+80     	; 0x7fa0 <verifySpace>
    7f50:	38 01       	movw	r6, r16
    7f52:	f3 01       	movw	r30, r6
	    boot_spm_busy_wait();
    7f54:	85 91       	lpm	r24, Z+
    7f56:	3f 01       	movw	r6, r30
    7f58:	14 d0       	rcall	.+40     	; 0x7f82 <putch>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7f5a:	ba 94       	dec	r11
    7f5c:	d1 f7       	brne	.-12     	; 0x7f52 <main+0x152>
    7f5e:	0e c0       	rjmp	.+28     	; 0x7f7c <main+0x17c>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f60:	85 37       	cpi	r24, 0x75	; 117
    7f62:	39 f4       	brne	.+14     	; 0x7f72 <main+0x172>
      uint8_t desttype;
      GETLENGTH(length);
    7f64:	1d d0       	rcall	.+58     	; 0x7fa0 <verifySpace>
    7f66:	8e e1       	ldi	r24, 0x1E	; 30
    7f68:	0c d0       	rcall	.+24     	; 0x7f82 <putch>
    7f6a:	85 e9       	ldi	r24, 0x95	; 149
    7f6c:	0a d0       	rcall	.+20     	; 0x7f82 <putch>

      desttype = getch();
    7f6e:	82 e0       	ldi	r24, 0x02	; 2
    7f70:	8c cf       	rjmp	.-232    	; 0x7e8a <main+0x8a>

      verifySpace();
    7f72:	81 35       	cpi	r24, 0x51	; 81
    7f74:	11 f4       	brne	.+4      	; 0x7f7a <main+0x17a>
    7f76:	88 e0       	ldi	r24, 0x08	; 8
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    7f78:	0f d0       	rcall	.+30     	; 0x7f98 <watchdogConfig>
    7f7a:	12 d0       	rcall	.+36     	; 0x7fa0 <verifySpace>
    7f7c:	80 e1       	ldi	r24, 0x10	; 16
    7f7e:	01 d0       	rcall	.+2      	; 0x7f82 <putch>
    7f80:	75 cf       	rjmp	.-278    	; 0x7e6c <main+0x6c>

00007f82 <putch>:
	} while (--length);
    7f82:	5d 9b       	sbis	0x0b, 5	; 11
    7f84:	fe cf       	rjmp	.-4      	; 0x7f82 <putch>
    7f86:	8c b9       	out	0x0c, r24	; 12

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f88:	08 95       	ret

00007f8a <getch>:
    7f8a:	5f 9b       	sbis	0x0b, 7	; 11
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f8c:	fe cf       	rjmp	.-4      	; 0x7f8a <getch>
    7f8e:	5c 99       	sbic	0x0b, 4	; 11
      putch(SIGNATURE_0);
    7f90:	01 c0       	rjmp	.+2      	; 0x7f94 <getch+0xa>
    7f92:	a8 95       	wdr
    7f94:	8c b1       	in	r24, 0x0c	; 12
      putch(SIGNATURE_1);
    7f96:	08 95       	ret

00007f98 <watchdogConfig>:
    7f98:	98 e1       	ldi	r25, 0x18	; 24
    7f9a:	91 bd       	out	0x21, r25	; 33
      putch(SIGNATURE_2);
    7f9c:	81 bd       	out	0x21, r24	; 33
    7f9e:	08 95       	ret

00007fa0 <verifySpace>:
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7fa0:	f4 df       	rcall	.-24     	; 0x7f8a <getch>
    7fa2:	80 32       	cpi	r24, 0x20	; 32
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7fa4:	19 f0       	breq	.+6      	; 0x7fac <verifySpace+0xc>
    7fa6:	88 e0       	ldi	r24, 0x08	; 8
    7fa8:	f7 df       	rcall	.-18     	; 0x7f98 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7faa:	ff cf       	rjmp	.-2      	; 0x7faa <verifySpace+0xa>
    7fac:	84 e1       	ldi	r24, 0x14	; 20
    }
    putch(STK_OK);
    7fae:	e9 cf       	rjmp	.-46     	; 0x7f82 <putch>

00007fb0 <getNch>:
    7fb0:	cf 93       	push	r28
    7fb2:	c8 2f       	mov	r28, r24
  }
    7fb4:	ea df       	rcall	.-44     	; 0x7f8a <getch>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
}
    7fb6:	c1 50       	subi	r28, 0x01	; 1
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fb8:	e9 f7       	brne	.-6      	; 0x7fb4 <getNch+0x4>
    7fba:	f2 df       	rcall	.-28     	; 0x7fa0 <verifySpace>
  do getch(); while (--count);
    7fbc:	cf 91       	pop	r28
    7fbe:	08 95       	ret

00007fc0 <appStart>:
    7fc0:	28 2e       	mov	r2, r24
    7fc2:	80 e0       	ldi	r24, 0x00	; 0
  verifySpace();
    7fc4:	e9 df       	rcall	.-46     	; 0x7f98 <watchdogConfig>
    7fc6:	e0 e0       	ldi	r30, 0x00	; 0
}
    7fc8:	ff 27       	eor	r31, r31
    7fca:	09 94       	ijmp
