
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0001fe6c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  00000300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000608  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027a  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000362  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e2  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000492  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
   1fc00:	1f 92       	push	r1
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc06:	11 24       	eor	r1, r1

#if defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)
   ch = MCUCSR;
   MCUCSR = 0;
#else
  ch = MCUSR;
   1fc08:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
   1fc0a:	14 be       	out	0x34, r1	; 52
#endif

 
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
   1fc0c:	98 2f       	mov	r25, r24
   1fc0e:	9d 70       	andi	r25, 0x0D	; 13
   1fc10:	09 f0       	breq	.+2      	; 0x1fc14 <main+0x14>
      appStart(ch);
   1fc12:	10 d1       	rcall	.+544    	; 0x1fe34 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc14:	85 e0       	ldi	r24, 0x05	; 5
   1fc16:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc1a:	82 e0       	ldi	r24, 0x02	; 2
   1fc1c:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc20:	88 e1       	ldi	r24, 0x18	; 24
   1fc22:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc26:	86 e0       	ldi	r24, 0x06	; 6
   1fc28:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc2c:	80 e1       	ldi	r24, 0x10	; 16
   1fc2e:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc32:	8e e0       	ldi	r24, 0x0E	; 14
   1fc34:	ea d0       	rcall	.+468    	; 0x1fe0a <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc36:	20 9a       	sbi	0x04, 0	; 4
   1fc38:	24 e0       	ldi	r18, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc3a:	80 e3       	ldi	r24, 0x30	; 48
   1fc3c:	9c ef       	ldi	r25, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   1fc3e:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc40:	90 93 85 00 	sts	0x0085, r25
   1fc44:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
   1fc48:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc4a:	b0 9b       	sbis	0x16, 0	; 22
   1fc4c:	fe cf       	rjmp	.-4      	; 0x1fc4a <main+0x4a>
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc4e:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc50:	a8 95       	wdr
   1fc52:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc54:	a9 f7       	brne	.-22     	; 0x1fc40 <main+0x40>
   1fc56:	61 2c       	mov	r6, r1
   1fc58:	71 2c       	mov	r7, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fc5a:	43 e0       	ldi	r20, 0x03	; 3
   1fc5c:	d4 2e       	mov	r13, r20
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fc5e:	cc 24       	eor	r12, r12
   1fc60:	c3 94       	inc	r12
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fc62:	51 e1       	ldi	r21, 0x11	; 17
   1fc64:	b5 2e       	mov	r11, r21
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc66:	c5 d0       	rcall	.+394    	; 0x1fdf2 <getch>

    if(ch == STK_GET_PARAMETER) {
   1fc68:	81 34       	cpi	r24, 0x41	; 65
   1fc6a:	79 f4       	brne	.+30     	; 0x1fc8a <main+0x8a>
      unsigned char which = getch();
   1fc6c:	c2 d0       	rcall	.+388    	; 0x1fdf2 <getch>
      verifySpace();
   1fc6e:	89 83       	std	Y+1, r24	; 0x01
   1fc70:	d2 d0       	rcall	.+420    	; 0x1fe16 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
   1fc72:	89 81       	ldd	r24, Y+1	; 0x01
   1fc74:	82 38       	cpi	r24, 0x82	; 130
   1fc76:	11 f4       	brne	.+4      	; 0x1fc7c <main+0x7c>
	  putch(optiboot_version & 0xFF);
   1fc78:	82 e0       	ldi	r24, 0x02	; 2
   1fc7a:	05 c0       	rjmp	.+10     	; 0x1fc86 <main+0x86>
      } else if (which == 0x81) {
   1fc7c:	81 38       	cpi	r24, 0x81	; 129
   1fc7e:	11 f4       	brne	.+4      	; 0x1fc84 <main+0x84>
	  putch(optiboot_version >> 8);
   1fc80:	86 e0       	ldi	r24, 0x06	; 6
   1fc82:	01 c0       	rjmp	.+2      	; 0x1fc86 <main+0x86>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
   1fc84:	83 e0       	ldi	r24, 0x03	; 3
   1fc86:	ae d0       	rcall	.+348    	; 0x1fde4 <putch>
   1fc88:	aa c0       	rjmp	.+340    	; 0x1fdde <main+0x1de>
      }
    }
    else if(ch == STK_SET_DEVICE) {
   1fc8a:	82 34       	cpi	r24, 0x42	; 66
   1fc8c:	11 f4       	brne	.+4      	; 0x1fc92 <main+0x92>
      // SET DEVICE is ignored
      getNch(20);
   1fc8e:	84 e1       	ldi	r24, 0x14	; 20
   1fc90:	03 c0       	rjmp	.+6      	; 0x1fc98 <main+0x98>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc92:	85 34       	cpi	r24, 0x45	; 69
   1fc94:	19 f4       	brne	.+6      	; 0x1fc9c <main+0x9c>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc96:	85 e0       	ldi	r24, 0x05	; 5
   1fc98:	c6 d0       	rcall	.+396    	; 0x1fe26 <getNch>
   1fc9a:	a1 c0       	rjmp	.+322    	; 0x1fdde <main+0x1de>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fc9c:	85 35       	cpi	r24, 0x55	; 85
   1fc9e:	69 f4       	brne	.+26     	; 0x1fcba <main+0xba>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
   1fca0:	a8 d0       	rcall	.+336    	; 0x1fdf2 <getch>
   1fca2:	68 2e       	mov	r6, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fca4:	a6 d0       	rcall	.+332    	; 0x1fdf2 <getch>
   1fca6:	71 2c       	mov	r7, r1
   1fca8:	78 2a       	or	r7, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fcaa:	87 2d       	mov	r24, r7
   1fcac:	88 1f       	adc	r24, r24
   1fcae:	88 27       	eor	r24, r24
   1fcb0:	88 1f       	adc	r24, r24
   1fcb2:	8b bf       	out	0x3b, r24	; 59
#endif
      newAddress += newAddress; // Convert from word address to byte address
   1fcb4:	66 0c       	add	r6, r6
   1fcb6:	77 1c       	adc	r7, r7
   1fcb8:	91 c0       	rjmp	.+290    	; 0x1fddc <main+0x1dc>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fcba:	86 35       	cpi	r24, 0x56	; 86
   1fcbc:	21 f4       	brne	.+8      	; 0x1fcc6 <main+0xc6>
      // UNIVERSAL command is ignored
      getNch(4);
   1fcbe:	84 e0       	ldi	r24, 0x04	; 4
   1fcc0:	b2 d0       	rcall	.+356    	; 0x1fe26 <getNch>
      putch(0x00);
   1fcc2:	80 e0       	ldi	r24, 0x00	; 0
   1fcc4:	e0 cf       	rjmp	.-64     	; 0x1fc86 <main+0x86>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcc6:	84 36       	cpi	r24, 0x64	; 100
   1fcc8:	09 f0       	breq	.+2      	; 0x1fccc <main+0xcc>
   1fcca:	55 c0       	rjmp	.+170    	; 0x1fd76 <main+0x176>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fccc:	92 d0       	rcall	.+292    	; 0x1fdf2 <getch>
   1fcce:	08 2f       	mov	r16, r24
   1fcd0:	10 e0       	ldi	r17, 0x00	; 0
   1fcd2:	10 2f       	mov	r17, r16
   1fcd4:	00 27       	eor	r16, r16
   1fcd6:	8d d0       	rcall	.+282    	; 0x1fdf2 <getch>
   1fcd8:	08 2b       	or	r16, r24
      savelength = length;
      desttype = getch();
   1fcda:	8b d0       	rcall	.+278    	; 0x1fdf2 <getch>
   1fcdc:	a8 2e       	mov	r10, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcde:	78 01       	movw	r14, r16
      savelength = length;
      desttype = getch();
   1fce0:	81 2c       	mov	r8, r1
   1fce2:	99 24       	eor	r9, r9
   1fce4:	93 94       	inc	r9

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fce6:	85 d0       	rcall	.+266    	; 0x1fdf2 <getch>
   1fce8:	f4 01       	movw	r30, r8
   1fcea:	81 93       	st	Z+, r24
   1fcec:	4f 01       	movw	r8, r30
      while (--length);
   1fcee:	f1 e0       	ldi	r31, 0x01	; 1
   1fcf0:	ef 1a       	sub	r14, r31
   1fcf2:	f1 08       	sbc	r15, r1
   1fcf4:	e1 14       	cp	r14, r1
   1fcf6:	f1 04       	cpc	r15, r1
   1fcf8:	b1 f7       	brne	.-20     	; 0x1fce6 <main+0xe6>

      // Read command terminator, start reply
      verifySpace();
   1fcfa:	8d d0       	rcall	.+282    	; 0x1fe16 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
   1fcfc:	85 e4       	ldi	r24, 0x45	; 69
   1fcfe:	a8 12       	cpse	r10, r24
   1fd00:	13 c0       	rjmp	.+38     	; 0x1fd28 <main+0x128>
   1fd02:	48 01       	movw	r8, r16
   1fd04:	86 0c       	add	r8, r6
   1fd06:	97 1c       	adc	r9, r7
   1fd08:	73 01       	movw	r14, r6
   1fd0a:	00 e0       	ldi	r16, 0x00	; 0
   1fd0c:	11 e0       	ldi	r17, 0x01	; 1
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
   1fd0e:	e8 14       	cp	r14, r8
   1fd10:	f9 04       	cpc	r15, r9
   1fd12:	09 f4       	brne	.+2      	; 0x1fd16 <main+0x116>
   1fd14:	64 c0       	rjmp	.+200    	; 0x1fdde <main+0x1de>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
   1fd16:	f8 01       	movw	r30, r16
   1fd18:	61 91       	ld	r22, Z+
   1fd1a:	8f 01       	movw	r16, r30
   1fd1c:	c7 01       	movw	r24, r14
   1fd1e:	98 d0       	rcall	.+304    	; 0x1fe50 <__eewr_byte_m1284p>
   1fd20:	ff ef       	ldi	r31, 0xFF	; 255
   1fd22:	ef 1a       	sub	r14, r31
   1fd24:	ff 0a       	sbc	r15, r31
   1fd26:	f3 cf       	rjmp	.-26     	; 0x1fd0e <main+0x10e>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fd28:	f3 01       	movw	r30, r6
   1fd2a:	d7 be       	out	0x37, r13	; 55
   1fd2c:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd2e:	07 b6       	in	r0, 0x37	; 55
   1fd30:	00 fc       	sbrc	r0, 0
   1fd32:	fd cf       	rjmp	.-6      	; 0x1fd2e <main+0x12e>
   1fd34:	20 e0       	ldi	r18, 0x00	; 0
   1fd36:	30 e0       	ldi	r19, 0x00	; 0
   1fd38:	f9 01       	movw	r30, r18
   1fd3a:	f3 95       	inc	r31
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
   1fd3c:	80 81       	ld	r24, Z
   1fd3e:	f9 01       	movw	r30, r18
   1fd40:	e6 0d       	add	r30, r6
   1fd42:	f7 1d       	adc	r31, r7
   1fd44:	d9 01       	movw	r26, r18
   1fd46:	af 5f       	subi	r26, 0xFF	; 255
   1fd48:	be 4f       	sbci	r27, 0xFE	; 254
		a |= (*bufPtr++) << 8;
   1fd4a:	4c 91       	ld	r20, X
   1fd4c:	90 e0       	ldi	r25, 0x00	; 0
   1fd4e:	94 2b       	or	r25, r20
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd50:	0c 01       	movw	r0, r24
   1fd52:	c7 be       	out	0x37, r12	; 55
   1fd54:	e8 95       	spm
   1fd56:	11 24       	eor	r1, r1
   1fd58:	2e 5f       	subi	r18, 0xFE	; 254
   1fd5a:	3f 4f       	sbci	r19, 0xFF	; 255
		addrPtr += 2;
	    } while (len -= 2);
   1fd5c:	02 17       	cp	r16, r18
   1fd5e:	13 07       	cpc	r17, r19
   1fd60:	59 f7       	brne	.-42     	; 0x1fd38 <main+0x138>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
   1fd62:	85 e0       	ldi	r24, 0x05	; 5
   1fd64:	f3 01       	movw	r30, r6
   1fd66:	87 bf       	out	0x37, r24	; 55
   1fd68:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd6a:	07 b6       	in	r0, 0x37	; 55
   1fd6c:	00 fc       	sbrc	r0, 0
   1fd6e:	fd cf       	rjmp	.-6      	; 0x1fd6a <main+0x16a>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fd70:	b7 be       	out	0x37, r11	; 55
   1fd72:	e8 95       	spm
   1fd74:	34 c0       	rjmp	.+104    	; 0x1fdde <main+0x1de>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd76:	84 37       	cpi	r24, 0x74	; 116
   1fd78:	21 f5       	brne	.+72     	; 0x1fdc2 <main+0x1c2>
      uint8_t desttype;
      GETLENGTH(length);
   1fd7a:	3b d0       	rcall	.+118    	; 0x1fdf2 <getch>
   1fd7c:	08 2f       	mov	r16, r24
   1fd7e:	10 e0       	ldi	r17, 0x00	; 0
   1fd80:	10 2f       	mov	r17, r16
   1fd82:	00 27       	eor	r16, r16
   1fd84:	36 d0       	rcall	.+108    	; 0x1fdf2 <getch>
   1fd86:	08 2b       	or	r16, r24

      desttype = getch();
   1fd88:	34 d0       	rcall	.+104    	; 0x1fdf2 <getch>

      verifySpace();
   1fd8a:	89 83       	std	Y+1, r24	; 0x01
   1fd8c:	44 d0       	rcall	.+136    	; 0x1fe16 <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fd8e:	89 81       	ldd	r24, Y+1	; 0x01
   1fd90:	73 01       	movw	r14, r6
   1fd92:	85 34       	cpi	r24, 0x45	; 69
   1fd94:	61 f4       	brne	.+24     	; 0x1fdae <main+0x1ae>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
   1fd96:	c7 01       	movw	r24, r14
   1fd98:	53 d0       	rcall	.+166    	; 0x1fe40 <__eerd_byte_m1284p>
   1fd9a:	24 d0       	rcall	.+72     	; 0x1fde4 <putch>
	} while (--length);
   1fd9c:	01 50       	subi	r16, 0x01	; 1
   1fd9e:	11 09       	sbc	r17, r1
   1fda0:	ff ef       	ldi	r31, 0xFF	; 255
   1fda2:	ef 1a       	sub	r14, r31
   1fda4:	ff 0a       	sbc	r15, r31
   1fda6:	01 15       	cp	r16, r1
   1fda8:	11 05       	cpc	r17, r1
   1fdaa:	a9 f7       	brne	.-22     	; 0x1fd96 <main+0x196>
   1fdac:	18 c0       	rjmp	.+48     	; 0x1fdde <main+0x1de>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fdae:	f7 01       	movw	r30, r14
   1fdb0:	87 91       	elpm	r24, Z+
   1fdb2:	7f 01       	movw	r14, r30
   1fdb4:	17 d0       	rcall	.+46     	; 0x1fde4 <putch>
	} while (--length);
   1fdb6:	01 50       	subi	r16, 0x01	; 1
   1fdb8:	11 09       	sbc	r17, r1
   1fdba:	01 15       	cp	r16, r1
   1fdbc:	11 05       	cpc	r17, r1
   1fdbe:	b9 f7       	brne	.-18     	; 0x1fdae <main+0x1ae>
   1fdc0:	0e c0       	rjmp	.+28     	; 0x1fdde <main+0x1de>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fdc2:	85 37       	cpi	r24, 0x75	; 117
   1fdc4:	39 f4       	brne	.+14     	; 0x1fdd4 <main+0x1d4>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fdc6:	27 d0       	rcall	.+78     	; 0x1fe16 <verifySpace>
      putch(SIGNATURE_0);
   1fdc8:	8e e1       	ldi	r24, 0x1E	; 30
   1fdca:	0c d0       	rcall	.+24     	; 0x1fde4 <putch>
      putch(SIGNATURE_1);
   1fdcc:	87 e9       	ldi	r24, 0x97	; 151
   1fdce:	0a d0       	rcall	.+20     	; 0x1fde4 <putch>
      putch(SIGNATURE_2);
   1fdd0:	85 e0       	ldi	r24, 0x05	; 5
   1fdd2:	59 cf       	rjmp	.-334    	; 0x1fc86 <main+0x86>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fdd4:	81 35       	cpi	r24, 0x51	; 81
   1fdd6:	11 f4       	brne	.+4      	; 0x1fddc <main+0x1dc>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fdd8:	88 e0       	ldi	r24, 0x08	; 8
   1fdda:	17 d0       	rcall	.+46     	; 0x1fe0a <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fddc:	1c d0       	rcall	.+56     	; 0x1fe16 <verifySpace>
    }
    putch(STK_OK);
   1fdde:	80 e1       	ldi	r24, 0x10	; 16
   1fde0:	01 d0       	rcall	.+2      	; 0x1fde4 <putch>
  }
   1fde2:	41 cf       	rjmp	.-382    	; 0x1fc66 <main+0x66>

0001fde4 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fde4:	90 91 c0 00 	lds	r25, 0x00C0
   1fde8:	95 ff       	sbrs	r25, 5
   1fdea:	fc cf       	rjmp	.-8      	; 0x1fde4 <putch>
  UART_UDR = ch;
   1fdec:	80 93 c6 00 	sts	0x00C6, r24
   1fdf0:	08 95       	ret

0001fdf2 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fdf2:	80 91 c0 00 	lds	r24, 0x00C0
   1fdf6:	87 ff       	sbrs	r24, 7
   1fdf8:	fc cf       	rjmp	.-8      	; 0x1fdf2 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fdfa:	80 91 c0 00 	lds	r24, 0x00C0
   1fdfe:	84 fd       	sbrc	r24, 4
   1fe00:	01 c0       	rjmp	.+2      	; 0x1fe04 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe02:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fe04:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fe08:	08 95       	ret

0001fe0a <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe0a:	e0 e6       	ldi	r30, 0x60	; 96
   1fe0c:	f0 e0       	ldi	r31, 0x00	; 0
   1fe0e:	98 e1       	ldi	r25, 0x18	; 24
   1fe10:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe12:	80 83       	st	Z, r24
   1fe14:	08 95       	ret

0001fe16 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe16:	ed df       	rcall	.-38     	; 0x1fdf2 <getch>
   1fe18:	80 32       	cpi	r24, 0x20	; 32
   1fe1a:	19 f0       	breq	.+6      	; 0x1fe22 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe1c:	88 e0       	ldi	r24, 0x08	; 8
   1fe1e:	f5 df       	rcall	.-22     	; 0x1fe0a <watchdogConfig>
   1fe20:	ff cf       	rjmp	.-2      	; 0x1fe20 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe22:	84 e1       	ldi	r24, 0x14	; 20
   1fe24:	df cf       	rjmp	.-66     	; 0x1fde4 <putch>

0001fe26 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe26:	cf 93       	push	r28
   1fe28:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe2a:	e3 df       	rcall	.-58     	; 0x1fdf2 <getch>
   1fe2c:	c1 50       	subi	r28, 0x01	; 1
   1fe2e:	e9 f7       	brne	.-6      	; 0x1fe2a <getNch+0x4>
  verifySpace();
}
   1fe30:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fe32:	f1 cf       	rjmp	.-30     	; 0x1fe16 <verifySpace>

0001fe34 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe34:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe36:	80 e0       	ldi	r24, 0x00	; 0
   1fe38:	e8 df       	rcall	.-48     	; 0x1fe0a <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
   1fe3a:	e0 e0       	ldi	r30, 0x00	; 0
   1fe3c:	ff 27       	eor	r31, r31
   1fe3e:	09 94       	ijmp

0001fe40 <__eerd_byte_m1284p>:
   1fe40:	f9 99       	sbic	0x1f, 1	; 31
   1fe42:	fe cf       	rjmp	.-4      	; 0x1fe40 <__eerd_byte_m1284p>
   1fe44:	92 bd       	out	0x22, r25	; 34
   1fe46:	81 bd       	out	0x21, r24	; 33
   1fe48:	f8 9a       	sbi	0x1f, 0	; 31
   1fe4a:	99 27       	eor	r25, r25
   1fe4c:	80 b5       	in	r24, 0x20	; 32
   1fe4e:	08 95       	ret

0001fe50 <__eewr_byte_m1284p>:
   1fe50:	26 2f       	mov	r18, r22

0001fe52 <__eewr_r18_m1284p>:
   1fe52:	f9 99       	sbic	0x1f, 1	; 31
   1fe54:	fe cf       	rjmp	.-4      	; 0x1fe52 <__eewr_r18_m1284p>
   1fe56:	1f ba       	out	0x1f, r1	; 31
   1fe58:	92 bd       	out	0x22, r25	; 34
   1fe5a:	81 bd       	out	0x21, r24	; 33
   1fe5c:	20 bd       	out	0x20, r18	; 32
   1fe5e:	0f b6       	in	r0, 0x3f	; 63
   1fe60:	f8 94       	cli
   1fe62:	fa 9a       	sbi	0x1f, 2	; 31
   1fe64:	f9 9a       	sbi	0x1f, 1	; 31
   1fe66:	0f be       	out	0x3f, r0	; 63
   1fe68:	01 96       	adiw	r24, 0x01	; 1
   1fe6a:	08 95       	ret
